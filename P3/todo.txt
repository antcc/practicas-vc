PUNTO 2:
https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_matcher/py_matcher.html

PUNTO 3:

- Tenemos dos imágenes y algunos puntos destacados con sus correspondencias (xi, yi) <--> (x'i, y'i). Queremos estimar una homografía H entre las dos imágenes. Para ello planteamos sistemas de ecuaciones y de alguna forma estimamos H. Esto con findHomography().

- Ahora, queremos transformar toda la imagen 1 mediante H, para tenerla en la 2 pero desde su punto de vista. Lo hacemos a la inversa: para cada punto de la 2, le aplicamos H^-1 y obtenemos el punto original. Si no coincide, interpolamos. Cogemos su color y lo ponemos en el pixel de la imagen 2 del que proviene. Esto se hace con warpPerspective().

- Creamos un nuevo canvas donde poner las imágenes. Elegimos un punto de vista (una imagen), por ejemplo la j-ésima, y la ponemos en el canvas (cerca del centro) mediante una homografía H0. Para mandar el resto de las imágenes, por ejemplo la i, calculamos la homografía Hij (la que lleva la imagen i a la j elegida, pasando por todas las que haga falta) y la componemos con H0.

I1 --> I2 --> ... --> I_j --> ... --> I_i --> I_i+1 --> ... --> I_N

Tengo cada homografía H_{i, i+1}.
